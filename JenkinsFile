pipeline {
  agent any

  environment {
    // URL de tu SonarQube
    SONAR_HOST_URL      = 'http://10.30.212.63:9000'

    // Memoria para el proceso Java del SonarScanner (ajústalo si necesitas)
    SONAR_SCANNER_OPTS  = '-Xmx1024m'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('SonarQube Analysis') {
      steps {
        script {
          // Ruta del SonarScanner instalado en "Manage Jenkins > Tools" con el nombre 'qube'
          def scannerHome = tool 'qube'

          // Usa la configuración de SonarQube definida en Jenkins (Manage Jenkins > System)
          withSonarQubeEnv('server-sonar-pipeline') {
            sh """
              ${scannerHome}/bin/sonar-scanner \
                -Dsonar.host.url=${SONAR_HOST_URL} \
                -Dsonar.projectKey=DVWA-escanner \
                -Dsonar.projectName=DVWA-Scan \
                -Dsonar.projectVersion=1.0 \
                -Dsonar.sources=. \
                -Dsonar.exclusions=**/node_modules/**,**/vendor/**,**/dist/**,**/build/**,**/*.min.js \
                -Dsonar.sourceEncoding=UTF-8 \
                -Dsonar.javascript.node.maxSpace=2048
            """
          }
        }
      }
    }

    stage('Quality Gate') {
      steps {
        timeout(time: 10, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }
  }
}
